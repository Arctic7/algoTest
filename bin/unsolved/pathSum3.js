/**
 * @param {TreeNode} root
 * @param {number} targetSum
 * @return {number}
 */
var pathSum = function(root, targetSum) {

};

/**
 * 给定一个二叉树的根节点root，和一个整数 targetSum ，求该二叉树里节点值之和等于 targetSum 的 路径 的数目。
 * 路径 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。
 * 二叉树的节点个数的范围是 [0,1000]
 * -10^9 <= Node.val <= 10^9
 * -1000 <= targetSum <= 1000
 *
 * 思路：
 * 以每个节点为根节点，计算它的所有路径，其中路径和符合目标值的
 * 由于题目定义的路径不要求从根节点开始，到叶子节点结束，且节点范围是0到1000，因此这里先假设单个节点也是符合路径的。
 * 所以先扫描所有节点，看单个节点是否等于目标值，如果是直接纳入统计。
 * 之后考虑2个节点及以上组成的路径。
 * 实际上，每一个节点，从根节点到它的路径都是固定的，可以抽象为一个数组。
 * 我们要做的，就是以当前节点为终点，抽取它前面的任意N个元素，和他求和，然后判断这个和等于目标值。
 * 但是多个路径之间又存在通用关系，比如根左和根右，是通用的。
 */